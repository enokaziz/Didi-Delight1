rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonctions de validation communes
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Règles pour la collection "events"
    match /events/{eventId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // Règles pour la collection "loyalty_points"
    match /loyalty_points/{userId} {
      allow read: if isAuthenticated() && (
        userId == request.auth.uid || isAdmin()
      );
      allow create: if isAuthenticated() && 
        userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        userId == request.auth.uid || isAdmin()
      );
    }

    // Règles pour la collection "loyalty_rewards"
    match /loyalty_rewards/{rewardId} {
      allow read: if isAuthenticated(); // Tous les utilisateurs authentifiés peuvent voir les récompenses
      allow create, update, delete: if isAdmin(); // Seuls les admins peuvent créer/modifier/supprimer
    }

    // Règles pour la collection "loyalty_settings"
    match /loyalty_settings/{settingId} {
      allow read: if isAuthenticated(); // Tous les utilisateurs authentifiés peuvent voir les paramètres
      allow write: if isAdmin(); // Seuls les admins peuvent modifier les paramètres
    }

    // Règles pour la collection "promotions"
    match /promotions/{promoId} {
      allow read: if true; // Tout le monde peut voir les promotions
      allow write: if isAdmin(); // Seuls les admins peuvent modifier
    }

    // Règles pour la collection "inventory"
    match /inventory/{itemId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Règles pour la collection "inventory_movements"
    match /inventory_movements/{movementId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Règles pour la collection "products"
    match /products/{document=**} {
      allow read: if true; // Tout le monde peut lire les produits
      allow write: if isAdmin(); // Seuls les admins peuvent écrire
    }

    // Règles pour la collection "orders"
    match /orders/{order} {
      allow read, write: if isAuthenticated(); // Seuls les utilisateurs connectés peuvent lire et écrire
    }

    // Règles pour la collection "users"
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin()); // Un utilisateur peut lire ses propres données, les admins peuvent lire toutes les données
      allow update: if isAuthenticated() && request.auth.uid == userId &&
        !(request.resource.data.role != resource.data.role); // Modification sauf le rôle
      allow write: if isAuthenticated() && request.auth.uid == userId; // Création par l'utilisateur lui-même
    }

    // Règles pour la collection "chats" et sous-collection "messages"
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == chatId.split('-')[0] || isAdmin());

      match /messages/{messageId} {
        allow read, write: if isAuthenticated() && 
          (request.auth.uid == chatId.split('-')[0] || isAdmin());
      }
    }
  }
}